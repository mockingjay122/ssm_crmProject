package com.gj.crm.workbench.mapper;

import com.gj.crm.workbench.entity.Activity;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;

@Repository
public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Oct 01 17:43:22 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Oct 01 17:43:22 CST 2022
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Oct 01 17:43:22 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Oct 01 17:43:22 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Oct 01 17:43:22 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat Oct 01 17:43:22 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 添加市场活动
     */
    int insertActivity(Activity activity);
    /**
     * 根局条件分页查询市场活动
     */
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);
    /**
     * 根局条件分页查询市场活动总条数
     */
    int selectCountActivityByCondition(Map<String,Object> map);
    /**
     * 根据id数组批量删除市场活动
     */
    int deleteActivity(String[] ids);
    /**
     * 根据id查询市场活动
     */
    Activity selectActivityById(String id);
    /**
     * 修改市场活动
     */
    int updateActivity(Activity activity);
    /**
     * 查询所有市场活动
     */
    List<Activity> selectAllActivity();
    /**
     * 根据id查询市场活动表
     *
     */
    List<Activity> selectAllActivityById(String [] ids);
    /**
     * 批量导入市场活动
     */
     int insertActivityByList(List<Activity> activityList);
    /**
     * 查询市场活动明细通过id
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据clueId查询该线索相关联的市场活动信息
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);
    /**
     * 根据名称模糊查询且吧clueId有关的市场活动排除
     */
    List<Activity> selectActivityByNameClueId(Map<String,Object> map);
    /**
     *  根据ids查询数组
     */
    List<Activity> selectActivityForDetailByIds(String []ids);
    /**
     *
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String,Object> map);

}